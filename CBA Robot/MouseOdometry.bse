' =========================================================================
'   File...... MouseOdometry.BSE
'   Purpose... Compares the mouse sensor against the wheel encoders.
'   Author.... Martin Heermance
'   E-mail.... mheermance@gmail.com
'   Started... 2020 Apr 15
'   Updated...
'
'   {$STAMP BS2e}
'   {$PBASIC 2.5}
' =========================================================================

' -----[ Program Description ]---------------------------------------------
'
' This program monitors the Parallax Mouse Sensor Module to use it for robot
' position feedback, while also moving the robot forward and backward to test
' repeatability

' -----[ Revision History ]------------------------------------------------
'
' 2020-04-15 Initial draft.

' -----[ Configuration Constants ]-----------------------------------------


' -----[ I/O Definitions ]-------------------------------------------------
LCD   PIN 9            ' LCD OUTPUT
sclk  PIN 10           ' Serial clock pin to mouse sensor.
sdio  PIN 11           ' Serial data I/O pin to mouse sensor.
RMotor   PIN 12        ' Pin for right servo
LMotor   PIN 13        ' Pin for left servo
REncoder PIN 14        ' Pin for right wheel encoder
LEncoder PIN 15        ' Pin for left wheel encoder

' -----[ Constants ]-------------------------------------------------------

COM_SPEED CON 84       ' 9600 baud non-inverted.

' Set the baud rate to 9600

#SELECT $STAMP
  #CASE BS2, BS2E, BS2PE : baud CON 84
  #CASE BS2SX, BS2P : baud CON 240
  #CASE BS2PX : baud CON 396
#ENDSELECT

' Mouse sensor register addresses.

DY    CON $02          ' Data register for current change in Y location.
DX    CON $03          ' Data register for current change in X location.
QLTY  CON $04          ' Data register for current image quality value.
STAT  CON $16          ' Status register.
CONF  CON $1B          ' Configuration register.

LORES CON $80          ' Value to write to CONF for 500 dpi resolution.
CHNG  CON $80          ' Bitmask for STAT to see if position changed.
OFLOW CON $18          ' Bitmask for STAT to detect X/Y overflow.
NEG   CON $80          ' Sign bit for DX and DY.

LStop CON 750          ' Pulse width for the servos while stopped
RStop CON 744

' -----[ Variables ]---------------------------------------------------------

addr  VAR Byte         ' Address value for mouse sensor register.
i     VAR Byte         ' General counter.
j     VAR Byte         ' Variable for use in FOR..NEXT LOOP
dat   VAR Byte         ' Data value to/from mouse sensor register.
sd    VAR Byte         ' Scratch register.
q     VAR Byte         ' Quality value from mouse sensor.
ovfl  VAR Byte         ' Overflow counter.

x     VAR Word         ' Current cummulative X position.
y     VAR Word         ' Current cummulative Y position.

LE    VAR Bit          ' Storage for encoder reading
RE    VAR Bit
LastLE VAR Bit         ' Storage of last encoder reading
LastRE VAR Bit
LCount VAR Byte        ' Storage of total accumulation of encoder counts
RCount VAR Byte
PD     VAR Word        ' Pulse delta during ramp.
PulseWidthRt VAR Word  ' Variables for pulse widths to servos
PulseWidthLt VAR Word  ' these hold the duration value

' -----[ Start of Main Program ]-----------------------------------------------------------

LastLE = IN15          ' Preset a value for the last reading = to the resting value
LastRE = IN14          ' Same for Right

' Initialize clock
LOW sclk
PAUSE 100              ' Wait for mouse sensor to come out of reset.

addr = CONF            ' Change resolution to 500 dpi.
dat = LORES
GOSUB WriteAddr

SEROUT LCD, COM_SPEED, ["?f"] ' Clear the screen.

' Main program loop.
Main:
  GOSUB Forward
  GOSUB Backward
  END

Monitor:
DO
  GOSUB ReadXYQ
  GOSUB DumpXYQ      'Use this to monitor X, Y, and Quality only.
LOOP

' -----[ Subroutines ]-------------------------------------------------------

' DumpXYQ outputs X, Y, and Quality data to the LCD
DumpXYQ:
  SEROUT LCD, COM_SPEED, ["?fx ", SDEC5 x, " y ", SDEC5 y, " quality ", DEC3 q]
  IF (ovfl) THEN
    ovfl = ovfl - 1
    SEROUT LCD, COM_SPEED, [" OVERFLOW"]
  ENDIF
  SEROUT LCD, COM_SPEED, ["?l"]
  RETURN

' ReadXYQ reads three registers and updates those variables
'   Outputs: x, y, ovfl
ReadXYQ:
  addr = STAT
  GOSUB ReadAddr

  IF (dat & CHNG = 0) THEN
    RETURN
  ELSEIF (dat & OFLOW) THEN
    ovfl = 10
  ENDIF

  addr = DX
  GOSUB ReadAddr
  x = x + dat
  ' sign extend if negative
  IF (dat & NEG) THEN x = x + $ff00

  addr = DY
  GOSUB ReadAddr
  y = y + dat
  ' sign extend if negative
  IF (dat & NEG) THEN y = y + $ff00
  addr = QLTY
  GOSUB ReadAddr
  q = dat
  RETURN

' ReadAddr reads a sensor chip register.
'   Inputs:  addr = address ($00 - $7F) to read.
'   Outputs: dat  = contents of the addressed register.
ReadAddr:
  SHIFTOUT sdio, sclk, MSBFIRST, [addr\8]
  INPUT sdio
  SHIFTIN sdio, sclk, MSBPOST, [dat\8]
  RETURN

' WriteAddr writes data to a sensor chip register.
'   Inputs:  addr = address ($00 - $7F) to write.
'            dat  = data to write to the addressed register.
WriteAddr:
  SHIFTOUT sdio, sclk, MSBFIRST, [addr|$80\8, dat\8]
  RETURN

' Moves forward 150 encoder counts
Forward:
  GOSUB Halt
  PD = 5
  GOSUB Ramp
  GOSUB Move
  PD = -5
  GOSUB Ramp
  GOSUB Halt
  RETURN

' Moves backward 150 encoder counts
Backward:
  GOSUB Halt
  PD = -5
  GOSUB Ramp
  GOSUB Move
  PD = 5
  GOSUB Ramp
  GOSUB Halt
  RETURN

' Ramp performs the ramp up/down phase of a trapazoidal ramp.
' Inputs: PulseWidthLt, PulseWidthRt, PD
' Outputs: PulseWidthLt, PulseWidthRt, LCount, RCount
Ramp:
  LCount = 0
  RCount = 0
  FOR j = 1 TO 25                  ' Normal servo pulse loop
    PulseWidthLt = PulseWidthLt + PD ' increment speed for each iteration.
    PulseWidthRt = PulseWidthRt - PD ' Same as above but minus for right servo
    GOSUB ReadEncoders             ' Read the wheel encoders
    IF LCount <= RCount THEN PULSOUT Lmotor, PulseWidthLt  ' Send pulse TO left
    IF RCount <= LCount THEN PULSOUT Rmotor, PulseWidthRt  ' Send pulse TO right
    GOSUB ReadXYQ
    'PAUSE 15                       ' Pause until next pulse is needed
  NEXT
  GOSUB DumpXYQ
  RETURN

' Move performs the constant movement phase of a trapazoidal ramp.
' Inputs: PulseWidthLt, PulseWidthRt
' Outputs: LCount, RCount
Move:
  LCount = 0
  RCount = 0
  FOR j = 1 TO 25                  ' Normal servo pulse loop
    GOSUB ReadEncoders             ' Read the wheel encoders
    IF LCount <= RCount THEN PULSOUT Lmotor, PulseWidthLt  ' Send pulse TO left
    IF RCount <= LCount THEN PULSOUT Rmotor, PulseWidthRt  ' Send pulse TO right
    GOSUB ReadXYQ
    'PAUSE 15                       ' Pause until next pulse is needed
  NEXT
  GOSUB DumpXYQ
  RETURN

' Halts the robot by sending MStop to both servos
Halt:
  PulseWidthLt = LStop
  PulseWidthRt = RStop
  FOR j = 1 TO 10                 ' Normal servo pulse loop
    PULSOUT Lmotor, PulseWidthLt  ' Send pulse TO left
    PULSOUT Rmotor, PulseWidthRt  ' Send pulse TO right
    GOSUB ReadXYQ
    PAUSE 15                      ' Pause until next pulse is needed
  NEXT
  GOSUB DumpXYQ
  RETURN

' ReadEncoders does exactly what it says on the tin.
' Inputs: LastRE, LastLE, LCount, RCount
' Outputs: LastRE, LastLE, LCount, RCount
ReadEncoders:
  LE = IN15              ' Read and save state of encoders
  RE = IN14              ' Pin 15 is left encoder, pin 14 is the right encoder
  IF LE <> LastLE THEN   ' If the current reading is not the same as the last reading then
    LCount = LCount + 1  ' Add 1 to the total count
    LastLE = LE          ' Save the state of the reading so we can compare on next loop
  ENDIF
  IF RE <> LastRE THEN   ' Do the same for the right side
    RCount = RCount + 1
    LastRE = RE
  ENDIF
  RETURN